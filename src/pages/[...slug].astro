---
import type { GetStaticPaths } from 'astro';
import type { MarkdownPage, TabPage } from '../types/content';

import Layout from '@layouts/Layout.astro';
import ContentView from '@components/ContentView.tsx';
import Footer from '@components/Footer.astro';
import { buildFileTree } from 'src/util/trie.ts'
import { generateSystem } from 'src/util/lsystem.ts';
import { DEFAULT_PAGE, L_SYSTEM } from '/src/data/const.ts';

interface Props {
  slug: string;
}

export const getStaticPaths = (() => {
  const pageGlob = import.meta.glob<MarkdownPage>(
    '../content/pages/**/*.md',
    { eager: true }
  );
  const markdownPages = Object.values(pageGlob);
  const pages = markdownPages.map(page => ({ params: { slug: page.url } }));
  pages.push({ params: { slug: undefined } })
  return pages;
}) satisfies GetStaticPaths;

let { slug } = Astro.params;

slug = slug ? '/' + slug : DEFAULT_PAGE;

// Generate pages to send to Preact component
const pageGlob = import.meta.glob<MarkdownPage>(
  '../content/pages/**/*.md',
  { eager: true }
);
const values = Object.values(pageGlob);
const pagePromises = values.map(async page => ({
  slug: page.url,
  title: page.frontmatter.title,
  content: await page.compiledContent(),
  lSystem: generateSystem(page.url!, L_SYSTEM),
} as TabPage));

const pages = await Promise.all(pagePromises);

const fileTree = buildFileTree(pages);
---

<Layout>
  <ContentView 
    degrees={L_SYSTEM.degrees}
    fileTree={fileTree}
    pages={pages}
    slug={slug}
    client:visible
  />
  <Footer/>
</Layout>

<script>

</script>
